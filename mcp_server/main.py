# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:17:41+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from starlette.requests import Request

app = MCPProxy(
    contact={'name': 'Fun Generators', 'url': 'http://fungenerators.com/api/barcode/'},
    description='Generate Barcode images for a given barcode number. You can decode Barcode images and get the barcodes in a numberic form as well. Many industry standard barcode types are supported. The best and complete Barcode API on the cloud. [Click here to subscribe](http://fungenerators.com/api/barcode/) \n',
    termsOfService='https://fungenerators.com/terms',
    title='Barcode API',
    version='1.5',
    servers=[
        {'url': 'http://api.fungenerators.com'},
        {'url': 'https://api.fungenerators.com'},
    ],
)


@app.post(
    '/barcode/decode',
    description=""" Decode a Barcode image and return the cotents if successful """,
    tags=['barcode_management'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def post_barcode_decode(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/barcode/decode/types',
    description=""" Get the supported barcode types for the decoding process. """,
    tags=['barcode_management'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_barcode_decode_types():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/barcode/encode',
    description=""" Get a Bar Code image for the given barcode number """,
    tags=['barcode_management'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_barcode_encode(
    number: str,
    barcodeformat: Optional[str] = None,
    outputformat: Optional[str] = None,
    widthfactor: Optional[int] = None,
    totalheight: Optional[int] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/barcode/encode/types',
    description=""" Get the supported barcode types for encoding / image generation. """,
    tags=['barcode_management'],
    security=[
        APIKeyHeader(name="X-Fungenerators-Api-Secret"),
    ],
)
def get_barcode_encode_types():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
